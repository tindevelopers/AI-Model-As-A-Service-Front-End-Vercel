// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin/analytics" | "/admin/analytics/revenue" | "/admin/api-keys" | "/admin/api-keys/create" | "/admin/health" | "/admin/settings" | "/admin/users" | "/admin/users/invite" | "/api-docs" | "/api-management" | "/auth/auth-code-error" | "/auth/forgot-password" | "/auth/reset-password" | "/auth/signin" | "/coming-soon" | "/dashboard" | "/error-404" | "/error-500" | "/error-503" | "/forgot-password" | "/maintenance" | "/reset-password" | "/settings" | "/settings/profile" | "/signin" | "/signup" | "/success" | "/tenant-management" | "/tenant-management/create" | "/test" | "/test-auth-fix" | "/test-magic-link" | "/test-signin" | "/test-tenant-creation" | "/two-step-verification"
type AppRouteHandlerRoutes = "/api/admin/api-keys" | "/api/admin/api-keys/[id]" | "/api/admin/assignments" | "/api/admin/health" | "/api/admin/platform-apis" | "/api/admin/providers" | "/api/admin/providers/[id]" | "/api/admin/reset-user-password" | "/api/admin/services" | "/api/admin/services/blog-writer/config" | "/api/admin/tenants" | "/api/admin/users" | "/api/admin/users/demote" | "/api/admin/users/promote" | "/api/admin/users/promote-tenant-admin" | "/api/ai/process" | "/api/auth/signout" | "/api/blog-writer/generate" | "/api/blog-writer/health" | "/api/debug/check-db" | "/api/debug/session" | "/api/debug/tenant-admin" | "/api/deployment-test" | "/api/health-check" | "/api/keys" | "/api/keys/[id]" | "/api/keys/stats" | "/api/setup/tenant-admin" | "/api/tenant/api-keys" | "/api/tenant/api-keys/[keyId]" | "/api/tenant/billing" | "/api/tenant/invite" | "/api/tenant/log-usage" | "/api/tenant/menu" | "/api/tenant/provisioning-keys" | "/api/tenant/roles" | "/api/tenant/statistics" | "/api/tenant/usage-analytics" | "/api/tenant/users/[userId]" | "/api/test-auth-callback" | "/api/test-auth-fix" | "/api/test-magic-link" | "/api/test-simple" | "/api/test-tenant-roles" | "/api/v1/ai/process" | "/api/v1/blog-writer/analyze" | "/api/v1/blog-writer/generate" | "/api/v1/blog-writer/keywords" | "/auth/callback"
type PageRoutes = never
type LayoutRoutes = "/" | "/dashboard"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin/analytics": {}
  "/admin/analytics/revenue": {}
  "/admin/api-keys": {}
  "/admin/api-keys/create": {}
  "/admin/health": {}
  "/admin/settings": {}
  "/admin/users": {}
  "/admin/users/invite": {}
  "/api-docs": {}
  "/api-management": {}
  "/api/admin/api-keys": {}
  "/api/admin/api-keys/[id]": { "id": string; }
  "/api/admin/assignments": {}
  "/api/admin/health": {}
  "/api/admin/platform-apis": {}
  "/api/admin/providers": {}
  "/api/admin/providers/[id]": { "id": string; }
  "/api/admin/reset-user-password": {}
  "/api/admin/services": {}
  "/api/admin/services/blog-writer/config": {}
  "/api/admin/tenants": {}
  "/api/admin/users": {}
  "/api/admin/users/demote": {}
  "/api/admin/users/promote": {}
  "/api/admin/users/promote-tenant-admin": {}
  "/api/ai/process": {}
  "/api/auth/signout": {}
  "/api/blog-writer/generate": {}
  "/api/blog-writer/health": {}
  "/api/debug/check-db": {}
  "/api/debug/session": {}
  "/api/debug/tenant-admin": {}
  "/api/deployment-test": {}
  "/api/health-check": {}
  "/api/keys": {}
  "/api/keys/[id]": { "id": string; }
  "/api/keys/stats": {}
  "/api/setup/tenant-admin": {}
  "/api/tenant/api-keys": {}
  "/api/tenant/api-keys/[keyId]": { "keyId": string; }
  "/api/tenant/billing": {}
  "/api/tenant/invite": {}
  "/api/tenant/log-usage": {}
  "/api/tenant/menu": {}
  "/api/tenant/provisioning-keys": {}
  "/api/tenant/roles": {}
  "/api/tenant/statistics": {}
  "/api/tenant/usage-analytics": {}
  "/api/tenant/users/[userId]": { "userId": string; }
  "/api/test-auth-callback": {}
  "/api/test-auth-fix": {}
  "/api/test-magic-link": {}
  "/api/test-simple": {}
  "/api/test-tenant-roles": {}
  "/api/v1/ai/process": {}
  "/api/v1/blog-writer/analyze": {}
  "/api/v1/blog-writer/generate": {}
  "/api/v1/blog-writer/keywords": {}
  "/auth/auth-code-error": {}
  "/auth/callback": {}
  "/auth/forgot-password": {}
  "/auth/reset-password": {}
  "/auth/signin": {}
  "/coming-soon": {}
  "/dashboard": {}
  "/error-404": {}
  "/error-500": {}
  "/error-503": {}
  "/forgot-password": {}
  "/maintenance": {}
  "/reset-password": {}
  "/settings": {}
  "/settings/profile": {}
  "/signin": {}
  "/signup": {}
  "/success": {}
  "/tenant-management": {}
  "/tenant-management/create": {}
  "/test": {}
  "/test-auth-fix": {}
  "/test-magic-link": {}
  "/test-signin": {}
  "/test-tenant-creation": {}
  "/two-step-verification": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/dashboard": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
